//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  ADMIN
  PROFESSOR
  USER
  ADMIN_PROFESSOR
}

enum CourseNature {
  GRADUATION
  POST_GRADUATION
}

enum ProjectStatus {
  ONGOING
  FINISHED
}

enum ContentNature {
  TEXT
  IMAGE
  ACCORDION
}

enum Alignment {
  LEFT
  CENTER
  RIGHT
}

enum BlockSize {
  SMALL
  MEDIUM
  LARGE
  FULL
}

enum GridSize {
  ONE
  TWO
  THREE
  FOUR
}

model User {
  id                      String     @id() @default(ulid())
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt()
  email                   String     @unique()
  password                String?
  name                    String?
  role                    Role       @default(USER)
  otpCode                 String?
  otpExpiration           DateTime?
  isFirstAccess           Boolean    @default(true)
  passwordResetToken      String?
  passwordResetExpiration DateTime?
  professor               Professor?
  logEntries              LogEntry[]
}

model Course {
  id                     String         @id() @default(ulid())
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt()
  name                   String         @unique()
  nature                 CourseNature
  slug                   String         @unique()
  description            String?
  aboutContentBlocks     ContentBlock[] @relation("aboutContentBlocks")
  admissionContentBlocks ContentBlock[] @relation("admissionContentBlocks")
  professors             Professor[]
  faqCategories          FaqCategory[]
}

model Professor {
  id                String      @id() @default(ulid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt()
  courses           Course[]
  summary           String?
  specialties       String[]
  researchAreas     String[]
  officeHours       String?
  lattes            String?
  publications      Json
  researchProjects  Json
  extensionProjects Json
  imageId           String?     @unique()
  image             Attachment? @relation(fields: [imageId], references: [id], onDelete: Cascade)
  userId            String      @unique()
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FaqCategory {
  id          String    @id() @default(ulid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  name        String
  description String?
  order       Int       @default(0)
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  faqItems    FaqItem[]
}

model FaqItem {
  id            String         @id() @default(ulid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
  title         String
  slug          String
  order         Int            @default(0)
  published     Boolean        @default(false)
  contentBlocks ContentBlock[]
  categoryId    String
  category      FaqCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, slug])
}

model ContentBlock {
  id                String        @id() @default(ulid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt()
  nature            ContentNature
  size              BlockSize?
  order             Int           @default(0)
  withBorder        Boolean       @default(false)
  gridSize          GridSize      @default(FOUR)
  alignment         Alignment?
  caption           String?
  fileId            String?       @unique()
  file              Attachment?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  content           String?       @db.Text()
  accordionItems    Json          @default("[]")
  courseId          String?
  course            Course?       @relation("aboutContentBlocks", fields: [courseId], references: [id], onDelete: Cascade)
  admissionCourseId String?
  admissionCourse   Course?       @relation("admissionContentBlocks", fields: [admissionCourseId], references: [id], onDelete: Cascade)
  faqItemId         String?
  faqItem           FaqItem?      @relation(fields: [faqItemId], references: [id], onDelete: Cascade)
}

model Attachment {
  id            String        @id() @default(ulid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt()
  name          String
  dataUrl       String
  mimeType      String
  size          Int
  contentBlocks ContentBlock?
  professor     Professor?
}

model LogEntry {
  id               String   @id() @default(ulid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()
  userId           String?
  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint         String
  method           String
  body             String?
  params           String?
  ip               String?
  userAgent        String?
  isError          Boolean  @default(false)
  error            String?
  response_headers String?
  response_body    String?
  response_status  Int?

  @@index([userId, createdAt])
  @@index([endpoint, createdAt])
  @@index([method, createdAt])
  @@index([isError, createdAt])
}
