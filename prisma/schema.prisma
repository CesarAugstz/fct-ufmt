//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  ADMIN
  PROFESSOR
  USER
  ADMIN_PROFESSOR
}

enum CourseNature {
  GRADUATION
  POST_GRADUATION
}

enum ProjectStatus {
  ONGOING
  FINISHED
}

enum FaqNature {
  SIMPLE
  PAGE
}

enum ContentNature {
  TEXT
  IMAGE
}

enum Alignment {
  LEFT
  CENTER
  RIGHT
}

enum BlockSize {
  SMALL
  MEDIUM
  LARGE
  FULL
}

model User {
  id         String     @id() @default(ulid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt()
  email      String     @unique()
  password   String
  name       String?
  role       Role       @default(USER)
  professor  Professor?
  logEntries LogEntry[]
}

model Course {
  id                 String         @id() @default(ulid())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt()
  name               String         @unique()
  nature             CourseNature
  slug               String         @unique()
  description        String?
  aboutContentBlocks ContentBlock[]
  professors         Professor[]
  faqCategories      FaqCategory[]
}

model Professor {
  id                String      @id() @default(ulid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt()
  courses           Course[]
  summary           String?
  specialties       String[]
  researchAreas     String[]
  officeHours       String?
  lattes            String?
  publications      Json
  researchProjects  Json
  extensionProjects Json
  imageId           String?     @unique()
  image             Attachment? @relation(fields: [imageId], references: [id], onDelete: Cascade)
  userId            String      @unique()
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FaqCategory {
  id          String    @id() @default(ulid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  name        String
  description String?
  order       Int       @default(0)
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  faqItems    FaqItem[]
}

model FaqItem {
  id         String      @id() @default(ulid())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt()
  title      String
  slug       String
  nature     FaqNature   @default(SIMPLE)
  order      Int         @default(0)
  published  Boolean     @default(false)
  content    String?
  categoryId String
  category   FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, slug])
}

model ContentBlock {
  id        String        @id() @default(ulid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt()
  nature    ContentNature
  content   String?       @db.Text()
  caption   String?
  size      BlockSize?
  alignment Alignment?
  order     Int           @default(0)
  courseId  String
  course    Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  fileId    String?       @unique()
  file      Attachment?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Attachment {
  id            String        @id() @default(ulid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt()
  name          String
  dataUrl       String
  mimeType      String
  size          Int
  contentBlocks ContentBlock?
  professor     Professor?
}

model LogEntry {
  id        String   @id() @default(ulid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint  String
  method    String
  body      String?
  params    String?
  response  String?
  ip        String?
  userAgent String?
  isError   Boolean  @default(false)
  error     String?

  @@index([userId, createdAt])
  @@index([endpoint, createdAt])
  @@index([method, createdAt])
  @@index([isError, createdAt])
}
