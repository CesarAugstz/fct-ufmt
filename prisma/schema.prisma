//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Role {
  ADMIN
  PROFESSOR
  USER
  ADMIN_PROFESSOR
}

enum CourseNature {
  GRADUATION
  POST_GRADUATION
}

enum NewsStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ProjectStatus {
  ONGOING
  FINISHED
}

enum ContentNature {
  TEXT
  IMAGE
  ACCORDION
}

enum Alignment {
  LEFT
  CENTER
  RIGHT
}

enum BlockSize {
  SMALL
  MEDIUM
  LARGE
  FULL
}

enum GridSize {
  ONE
  TWO
  THREE
  FOUR
}

enum ProjectType {
  EXTENSION
  RESEARCH
}

model User {
  id                      String     @id() @default(ulid())
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt()
  email                   String     @unique()
  password                String?
  name                    String?
  role                    Role       @default(USER)
  otpCode                 String?
  otpExpiration           DateTime?
  isFirstAccess           Boolean    @default(true)
  passwordResetToken      String?
  passwordResetExpiration DateTime?
  professor               Professor?
  logEntries              LogEntry[]
}

model Course {
  id                     String         @id() @default(ulid())
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt()
  name                   String         @unique()
  nature                 CourseNature
  slug                   String         @unique()
  description            String?
  aboutContentBlocks     ContentBlock[] @relation("aboutContentBlocks")
  admissionContentBlocks ContentBlock[] @relation("admissionContentBlocks")
  professors             Professor[]
  faqCategories          FaqCategory[]
}

model NewsCategory {
  id          String   @id() @default(ulid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  name        String   @unique()
  description String?
  slug        String   @unique()
  order       Int      @default(0)
  news        News[]
}

model News {
  id              String         @id() @default(ulid())
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt()
  title           String
  excerpt         String?        @db.Text()
  slug            String         @unique()
  status          NewsStatus     @default(DRAFT)
  isPinned        Boolean        @default(false)
  publishedAt     DateTime?
  author          String
  featuredImageId String?        @unique()
  featuredImage   Attachment?    @relation("NewsFeaturedImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
  contentBlocks   ContentBlock[] @relation("NewsContentBlocks")
  categoryId      String
  category        NewsCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([status, publishedAt])
  @@index([categoryId, publishedAt])
  @@index([isPinned, publishedAt])
}

model Professor {
  id                String      @id() @default(ulid())
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt()
  courses           Course[]
  summary           String?
  specialties       String[]
  researchAreas     String[]
  officeHours       String?
  lattes            String?
  publications      Json
  researchProjects  Json
  extensionProjects Json
  imageId           String?     @unique()
  image             Attachment? @relation(fields: [imageId], references: [id], onDelete: Cascade)
  userId            String      @unique()
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FaqCategory {
  id          String    @id() @default(ulid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  name        String
  description String?
  order       Int       @default(0)
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  faqItems    FaqItem[]
}

model FaqItem {
  id            String         @id() @default(ulid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
  title         String
  slug          String
  order         Int            @default(0)
  published     Boolean        @default(false)
  contentBlocks ContentBlock[]
  categoryId    String
  category      FaqCategory    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, slug])
}

model ContentBlock {
  id                String        @id() @default(ulid())
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt()
  nature            ContentNature
  size              BlockSize?
  order             Int           @default(0)
  withBorder        Boolean       @default(false)
  gridSize          GridSize      @default(FOUR)
  alignment         Alignment?
  caption           String?
  fileId            String?       @unique()
  file              Attachment?   @relation(fields: [fileId], references: [id], onDelete: Cascade)
  content           String?       @db.Text()
  accordionItems    Json          @default("[]")
  courseId          String?
  course            Course?       @relation("aboutContentBlocks", fields: [courseId], references: [id], onDelete: Cascade)
  admissionCourseId String?
  admissionCourse   Course?       @relation("admissionContentBlocks", fields: [admissionCourseId], references: [id], onDelete: Cascade)
  faqItemId         String?
  faqItem           FaqItem?      @relation(fields: [faqItemId], references: [id], onDelete: Cascade)
  newsId            String?
  news              News?         @relation("NewsContentBlocks", fields: [newsId], references: [id], onDelete: Cascade)
  managementId      String?
  management        Management?   @relation(fields: [managementId], references: [id], onDelete: Cascade)
  projectId         String?
  project           Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  genericPageId     String?
  genericPage       GenericPage?  @relation(fields: [genericPageId], references: [id], onDelete: Cascade)
}

model Attachment {
  id                 String        @id() @default(ulid())
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt()
  name               String
  dataUrl            String
  mimeType           String
  size               Int
  contentBlocks      ContentBlock?
  professor          Professor?
  newsFeaturedImage  News?         @relation("NewsFeaturedImage")
  bannerImage        CollegeData?  @relation("CollegeDataBannerImage")
  secondBannerImages CollegeData[] @relation("CollegeDataSecondBannerImages")
  collegeLogo        CollegeData?  @relation("CollegeDataLogo")
}

model Management {
  id            String         @id() @default(ulid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
  contentBlocks ContentBlock[]
}

model Project {
  id            String         @id() @default(ulid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
  title         String
  description   String?
  type          ProjectType
  contentBlocks ContentBlock[]
  slug          String         @unique()
}

model Section {
  id              String        @id() @default(ulid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt()
  title           String
  slug            String        @unique()
  pages           GenericPage[] @relation("SectionPages")
  parentSectionId String?
  parentSection   Section?      @relation("SectionHierarchy", fields: [parentSectionId], references: [id], onDelete: Cascade)
  subSections     Section[]     @relation("SectionHierarchy")
}

model GenericPage {
  id            String         @id() @default(ulid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt()
  title         String
  description   String?
  slug          String         @unique()
  contentBlocks ContentBlock[]
  sectionId     String?
  section       Section?       @relation(name: "SectionPages", fields: [sectionId], references: [id], onDelete: Cascade)
}

model CollegeData {
  id                      String       @id() @default(ulid())
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt()
  name                    String?
  acronym                 String?
  description             String?
  logoId                  String?      @unique()
  logo                    Attachment?  @relation(name: "CollegeDataLogo", fields: [logoId], references: [id], onDelete: Cascade)
  bannerTitle             String?
  bannerSubtitle          String?
  bannerButtonLabel       String?
  bannerImageId           String?      @unique()
  bannerImage             Attachment?  @relation(name: "CollegeDataBannerImage", fields: [bannerImageId], references: [id], onDelete: Cascade)
  secondBannerTitle       String?
  secondBannerSubtitle    String?
  secondBannerButtonLabel String?
  secondBannerImages      Attachment[] @relation("CollegeDataSecondBannerImages")
  quickLinks              Json
  bannerNumbersTitle      String?
  bannerNumbersSubtitle   String?
  bannerNumbersItems      Json
  locationItems           String[]
  contactItems            String[]
  usefulLinksItems        Json
  instagram               String?
  youtube                 String?
}

model Personalization {
  id                            String   @id() @default(ulid())
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt()
  lightPrimary                  String   @default("#0a1f40")
  lightPrimaryForeground        String   @default("oklch(0.97 0.014 254.604)")
  lightPrimaryLight             String   @default("#33658aff")
  lightSecondary                String   @default("#86bbd8ff")
  lightSecondaryForeground      String   @default("oklch(0.21 0.006 285.885)")
  lightBackground               String   @default("oklch(1 0 0)")
  lightBackgroundHover          String   @default("oklch(0.89 0.05 261.52 / 0.34)")
  lightForeground               String   @default("oklch(0.141 0.005 285.823)")
  lightCard                     String   @default("oklch(1 0 0)")
  lightCardForeground           String   @default("oklch(0.141 0.005 285.823)")
  lightPopover                  String   @default("oklch(1 0 0)")
  lightPopoverForeground        String   @default("oklch(0.141 0.005 285.823)")
  lightMuted                    String   @default("oklch(0.967 0.001 286.375)")
  lightMutedForeground          String   @default("oklch(0.552 0.016 285.938)")
  lightAccent                   String   @default("oklch(0.23 0.1575 264.59)")
  lightAccentForeground         String   @default("oklch(0.78 0.0197 285.94)")
  lightDestructive              String   @default("oklch(0.577 0.245 27.325)")
  lightDestructiveForeground    String   @default("oklch(0.97 0.014 254.604)")
  lightWarning                  String   @default("oklch(0.89 0.1497 93.45)")
  lightWarningForeground        String   @default("oklch(0.21 0.006 285.885)")
  lightBorder                   String   @default("oklch(0.92 0.004 286.32)")
  lightInput                    String   @default("oklch(0.92 0.004 286.32)")
  lightRing                     String   @default("oklch(0.623 0.214 259.815)")
  darkPrimary                   String   @default("oklch(37.763% 0.13704 262.925)")
  darkPrimaryForeground         String   @default("oklch(0.78 0.0767 267.22)")
  darkPrimaryLight              String   @default("#33658aff")
  darkSecondary                 String   @default("oklch(0.274 0.006 286.033)")
  darkSecondaryForeground       String   @default("oklch(0.985 0 0)")
  darkBackground                String   @default("oklch(0.141 0.005 285.823)")
  darkBackgroundHover           String   @default("oklch(0.25 0.0207 284.83)")
  darkForeground                String   @default("oklch(0.985 0 0)")
  darkCard                      String   @default("oklch(0.21 0.006 285.885)")
  darkCardForeground            String   @default("oklch(0.985 0 0)")
  darkPopover                   String   @default("oklch(0.21 0.006 285.885)")
  darkPopoverForeground         String   @default("oklch(0.985 0 0)")
  darkMuted                     String   @default("oklch(0.274 0.006 286.033)")
  darkMutedForeground           String   @default("oklch(0.705 0.015 286.067)")
  darkAccent                    String   @default("oklch(0.274 0.006 286.033)")
  darkAccentForeground          String   @default("oklch(0.985 0 0)")
  darkDestructive               String   @default("oklch(0.704 0.191 22.216)")
  darkDestructiveForeground     String   @default("oklch(0.985 0 0)")
  darkWarning                   String   @default("oklch(0.89 0.1497 93.45)")
  darkWarningForeground         String   @default("oklch(0.21 0.006 285.885)")
  darkBorder                    String   @default("oklch(1 0 0 / 10%)")
  darkInput                     String   @default("oklch(1 0 0 / 15%)")
  darkRing                      String   @default("oklch(0.488 0.243 264.376)")
  lightSidebarBackground        String   @default("oklch(0.985 0 0)")
  lightSidebarForeground        String   @default("oklch(0.141 0.005 285.823)")
  lightSidebarPrimary           String   @default("oklch(0.623 0.214 259.815)")
  lightSidebarPrimaryForeground String   @default("oklch(0.97 0.014 254.604)")
  lightSidebarAccent            String   @default("oklch(0.967 0.001 286.375)")
  lightSidebarAccentForeground  String   @default("oklch(0.21 0.006 285.885)")
  lightSidebarBorder            String   @default("oklch(0.92 0.004 286.32)")
  lightSidebarRing              String   @default("oklch(0.623 0.214 259.815)")
  darkSidebarBackground         String   @default("oklch(0.21 0.006 285.885)")
  darkSidebarForeground         String   @default("oklch(0.985 0 0)")
  darkSidebarPrimary            String   @default("oklch(0.546 0.245 262.881)")
  darkSidebarPrimaryForeground  String   @default("oklch(0.379 0.146 265.522)")
  darkSidebarAccent             String   @default("oklch(0.274 0.006 286.033)")
  darkSidebarAccentForeground   String   @default("oklch(0.985 0 0)")
  darkSidebarBorder             String   @default("oklch(1 0 0 / 10%)")
  darkSidebarRing               String   @default("oklch(0.488 0.243 264.376)")
  chartColor1                   String   @default("oklch(0.646 0.222 41.116)")
  chartColor2                   String   @default("oklch(0.6 0.118 184.704)")
  chartColor3                   String   @default("oklch(0.398 0.07 227.392)")
  chartColor4                   String   @default("oklch(0.828 0.189 84.429)")
  chartColor5                   String   @default("oklch(0.769 0.188 70.08)")
  isActive                      Boolean  @default(false)
}

model LogEntry {
  id               String   @id() @default(ulid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()
  userId           String?
  user             User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint         String
  method           String
  body             String?
  params           String?
  ip               String?
  userAgent        String?
  isError          Boolean  @default(false)
  error            String?
  response_headers String?
  response_body    String?
  response_status  Int?

  @@index([userId, createdAt])
  @@index([endpoint, createdAt])
  @@index([method, createdAt])
  @@index([isError, createdAt])
}
