generator client {
  provider = "prisma-client-js"
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  version = 'v5'
  output = "./src/lib/zenstack-hooks"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

abstract model BaseModel {
  id        String   @id @default(ulid()) @allow('read', true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  PROFESSOR
  USER
  ADMIN_PROFESSOR
}

model User extends BaseModel {
  email     String     @unique
  password  String?    @password @omit @allow('update', auth() == this || auth().role == 'ADMIN' || role == 'PROFESSOR')
  name      String?
  role      Role       @default(USER) @allow('update', auth() == this || auth().role == 'ADMIN')
  
  otpCode            String?
  otpExpiration      DateTime?
  isFirstAccess      Boolean  @default(true)
  passwordResetToken String?
  passwordResetExpiration DateTime?

  professor Professor?
  logEntries LogEntry[]

  @@deny('all', auth() == null)
  
  @@allow('create', auth().role == 'USER' && (role == 'USER' || role == 'PROFESSOR'))
  
  @@allow('create', auth().role == 'ADMIN')
  
  @@allow('read', true)
  @@allow('update', auth() == this || auth().role == 'ADMIN')
  @@allow('update', auth().role == 'USER' && role == 'PROFESSOR')
  @@allow('delete', auth().role == 'ADMIN')
}


enum CourseNature {
  GRADUATION
  POST_GRADUATION
}

enum NewsStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Course extends BaseModel {
  name String @unique
  nature CourseNature
  slug String @unique 
  description String?

  aboutContentBlocks ContentBlock[] @relation('aboutContentBlocks')
  admissionContentBlocks ContentBlock[] @relation('admissionContentBlocks')
  professors Professor[]
  faqCategories FaqCategory[]

  @@allow('read', true)
  @@allow('create,update', auth() != null)
  @@allow('delete', auth().role == 'ADMIN')
}

model NewsCategory extends BaseModel {
  name        String   @unique
  description String?
  slug        String   @unique
  order       Int      @default(0)
  news        News[]

  @@allow('read', true)
  @@allow('create,update,delete', auth() != null)
}

model News extends BaseModel {
  title           String
  excerpt         String?        @db.Text
  slug            String         @unique
  status          NewsStatus     @default(DRAFT)
  isPinned        Boolean        @default(false)
  publishedAt     DateTime?
  author          String
  
  featuredImageId String?        @unique
  featuredImage   Attachment?    @relation('NewsFeaturedImage', fields: [featuredImageId], references: [id], onDelete: SetNull)
  contentBlocks   ContentBlock[] @relation('NewsContentBlocks')
  
  categoryId      String
  category        NewsCategory   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@index([status, publishedAt])
  @@index([categoryId, publishedAt])
  @@index([isPinned, publishedAt])
  @@allow('read', status == 'PUBLISHED' || auth() != null)
  @@allow('create,update,delete', auth() != null)
}

type Publication {
  title   String
  authors String[]
  date    DateTime
  link    String?
}

enum ProjectStatus {
  ONGOING
  FINISHED
}

type ResearchProject {
  title       String
  startDate   DateTime
  endDate     DateTime?
  status      ProjectStatus
  description String?
}

type ExtensionProject {
  title       String
  startDate   DateTime
  status      ProjectStatus
  endDate     DateTime?
  description String?
}

model Professor extends BaseModel {
  courses           Course[]

  summary           String?
  specialties       String[]
  researchAreas     String[]
  officeHours       String?
  lattes            String?
  publications      Publication[]      @json
  researchProjects  ResearchProject[]  @json
  extensionProjects ExtensionProject[] @json 

  imageId           String?            @unique
  image             Attachment? @relation(fields: [imageId], references: [id], onDelete: Cascade)

  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@allow('read', true)
  @@allow('create', auth().role == 'USER')
  @@allow('create', auth().role == 'ADMIN')
  @@allow('update,delete', auth().role == 'ADMIN' || auth() == user)
  @@allow('update', auth().role == 'USER')
}

model FaqCategory extends BaseModel {
  name        String
  description String?
  order       Int      @default(0)
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  faqItems    FaqItem[]

  @@allow('read', true)
  @@allow('create,update,delete', auth() != null)
}

model FaqItem extends BaseModel {
  title       String
  slug        String
  order       Int      @default(0)
  published   Boolean  @default(false)
  
  contentBlocks ContentBlock[]
  
  categoryId  String
  category    FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([categoryId, slug])
  @@allow('read', published || auth() != null)
  @@allow('create,update,delete', auth().role != null)
}

enum ContentNature {
  TEXT
  IMAGE
  ACCORDION
}

enum Alignment {
  LEFT
  CENTER
  RIGHT
}

enum BlockSize {
  SMALL
  MEDIUM
  LARGE
  FULL
}

enum GridSize {
  ONE    // 3/12 - 25%
  TWO    // 6/12 - 50%
  THREE  // 9/12 - 75%
  FOUR   // 12/12 - 100%
}

type AccordionItem {
  title   String
  content String
}

model ContentBlock extends BaseModel {
  nature       ContentNature
  size       BlockSize?
  order      Int      @default(0)
  withBorder Boolean  @default(false)
  gridSize   GridSize @default(FOUR)

  alignment  Alignment?
  caption    String?
  fileId     String?  @unique
  file       Attachment?    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  content    String? @db.Text

  accordionItems AccordionItem[] @json @default('[]')

  courseId   String?
  course     Course?   @relation('aboutContentBlocks', fields: [courseId], references: [id], onDelete: Cascade)

  admissionCourseId   String?
  admissionCourse     Course?   @relation('admissionContentBlocks', fields: [admissionCourseId], references: [id], onDelete: Cascade)

  faqItemId   String?
  faqItem     FaqItem?   @relation(fields: [faqItemId], references: [id], onDelete: Cascade)

  newsId      String?
  news        News?      @relation('NewsContentBlocks', fields: [newsId], references: [id], onDelete: Cascade)

  managementId String?
  management   Management? @relation(fields: [managementId], references: [id], onDelete: Cascade)

  @@allow('read', true)
  @@allow('create,update,delete', auth().role != null)
}

model Attachment extends BaseModel {
  name     String
  dataUrl  String
  mimeType String
  size     Int

  contentBlocks ContentBlock? 
  professor Professor?
  newsFeaturedImage News? @relation('NewsFeaturedImage')

  @@allow('read', true)
  @@allow('create,update,delete', auth() != null)
}

model Management extends BaseModel {
  contentBlocks ContentBlock[]

  @@allow('read', true)
  @@allow('create,update,delete', auth() != null)
}

model LogEntry extends BaseModel {
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  endpoint String
  method   String 
  body     String?
  params   String?
  ip       String?
  userAgent String?
  isError  Boolean @default(false)
  error    String?
  response_headers String?
  response_body String?
  response_status Int?

  @@allow('all', auth().role == 'ADMIN')
  @@index([userId, createdAt])
  @@index([endpoint, createdAt])
  @@index([method, createdAt])
  @@index([isError, createdAt])
}
