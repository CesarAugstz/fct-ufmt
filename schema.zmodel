generator client {
  provider = "prisma-client-js"
}

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  version = 'v5'
  output = "./src/lib/zenstack-hooks"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

abstract model BaseModel {
  id        String   @id @default(ulid()) @allow('read', true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  PROFESSOR
  USER
  ADMIN_PROFESSOR
}

model User extends BaseModel {
  email     String     @unique
  password  String     @password @omit
  name      String?
  role      Role       @default(USER)

  professor Professor?
  logEntries LogEntry[]

  @@allow('create,read', true)
  @@allow('update,delete', auth().role == 'ADMIN' || auth() == this)
}

enum CourseNature {
  GRADUATION
  POST_GRADUATION
}

model Course extends BaseModel {
  name String @unique
  nature CourseNature
  slug String @unique 
  description String?

  aboutContentBlocks ContentBlock[]
  professors Professor[]
  faqCategories FaqCategory[]

  @@allow('all', true)
}

type Publication {
  title   String
  authors String[]
  date    DateTime
  link    String?
}

enum ProjectStatus {
  ONGOING
  FINISHED
}

type ResearchProject {
  title       String
  startDate   DateTime
  endDate     DateTime?
  status      ProjectStatus
  description String?
}

type ExtensionProject {
  title       String
  startDate   DateTime
  status      ProjectStatus
  endDate     DateTime?
  description String?
}

model Professor extends BaseModel {
  courses           Course[]

  summary           String?
  specialties       String[]
  researchAreas     String[]
  officeHours       String?
  lattes            String?
  publications      Publication[]      @json
  researchProjects  ResearchProject[]  @json
  extensionProjects ExtensionProject[] @json 

  imageId           String?            @unique
  image             Attachment? @relation(fields: [imageId], references: [id], onDelete: Cascade)

  userId            String             @unique
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@allow('create,read', true)
  @@allow('update,delete', auth().role == 'ADMIN' || auth() == user)
}

enum FaqNature {
  SIMPLE
  PAGE
}

model FaqCategory extends BaseModel {
  name        String
  description String?
  order       Int      @default(0)
  
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  faqItems    FaqItem[]

  @@allow('read', true)
  @@allow('create,update,delete', auth().role == 'ADMIN')
}

model FaqItem extends BaseModel {
  title       String
  slug        String
  nature      FaqNature  @default(SIMPLE)
  order       Int      @default(0)
  published   Boolean  @default(false)
  
  content     String?
  
  categoryId  String
  category    FaqCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@unique([categoryId, slug])
  @@allow('read', published || auth().role == 'ADMIN')
  @@allow('create', auth() != null)
  @@allow('update,delete', auth().role == 'ADMIN')
}

enum ContentNature {
  TEXT
  IMAGE
}

enum Alignment {
  LEFT
  CENTER
  RIGHT
}

enum BlockSize {
  SMALL
  MEDIUM
  LARGE
  FULL
}

enum GridSize {
  ONE    // 3/12 - 25%
  TWO    // 6/12 - 50%
  THREE  // 9/12 - 75%
  FOUR   // 12/12 - 100%
}

model ContentBlock extends BaseModel {
  nature       ContentNature
  content    String? @db.Text
  caption    String?
  size       BlockSize?
  alignment  Alignment?
  order      Int      @default(0)
  withBorder Boolean  @default(false)
  gridSize   GridSize @default(FOUR)

  courseId   String
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  fileId     String?  @unique
  file       Attachment?    @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@allow('read', true)
  @@allow('create,update,delete', auth().role == 'ADMIN')
}

model Attachment extends BaseModel {
  name     String
  dataUrl  String
  mimeType String
  size     Int

  contentBlocks ContentBlock? 
  professor Professor?

  @@allow('read', true)
  @@allow('create,update,delete', auth().role == 'ADMIN' || auth() == professor.user)
}

model LogEntry extends BaseModel {
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  endpoint String
  method   String 
  body     String?
  params   String?
  response String?
  ip       String?
  userAgent String?
  isError  Boolean @default(false)
  error    String?

  @@allow('all', auth().role == 'ADMIN')
  @@index([userId, createdAt])
  @@index([endpoint, createdAt])
  @@index([method, createdAt])
  @@index([isError, createdAt])
}
