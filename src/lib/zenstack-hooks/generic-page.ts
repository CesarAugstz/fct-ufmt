/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, GenericPage } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateGenericPage(options?: Omit<(UseMutationOptions<(GenericPage | undefined), DefaultError, Prisma.GenericPageCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GenericPageCreateArgs, DefaultError, GenericPage, true>('GenericPage', 'POST', `${endpoint}/genericPage/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GenericPageCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GenericPageCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GenericPage, Prisma.GenericPageGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GenericPageCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GenericPage, Prisma.GenericPageGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyGenericPage(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GenericPageCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GenericPageCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('GenericPage', 'POST', `${endpoint}/genericPage/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GenericPageCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GenericPageCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GenericPageCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyGenericPage<TArgs extends Prisma.GenericPageFindManyArgs, TQueryFnData = Array<Prisma.GenericPageGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GenericPageFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/findMany`, args, options, fetch);
}

export function useInfiniteFindManyGenericPage<TArgs extends Prisma.GenericPageFindManyArgs, TQueryFnData = Array<Prisma.GenericPageGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GenericPageFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/findMany`, args, options, fetch);
}

export function useSuspenseFindManyGenericPage<TArgs extends Prisma.GenericPageFindManyArgs, TQueryFnData = Array<Prisma.GenericPageGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GenericPageFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyGenericPage<TArgs extends Prisma.GenericPageFindManyArgs, TQueryFnData = Array<Prisma.GenericPageGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GenericPageFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/findMany`, args, options, fetch);
}

export function useFindUniqueGenericPage<TArgs extends Prisma.GenericPageFindUniqueArgs, TQueryFnData = Prisma.GenericPageGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GenericPageFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueGenericPage<TArgs extends Prisma.GenericPageFindUniqueArgs, TQueryFnData = Prisma.GenericPageGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GenericPageFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/findUnique`, args, options, fetch);
}

export function useFindFirstGenericPage<TArgs extends Prisma.GenericPageFindFirstArgs, TQueryFnData = Prisma.GenericPageGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GenericPageFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstGenericPage<TArgs extends Prisma.GenericPageFindFirstArgs, TQueryFnData = Prisma.GenericPageGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GenericPageFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/findFirst`, args, options, fetch);
}

export function useUpdateGenericPage(options?: Omit<(UseMutationOptions<(GenericPage | undefined), DefaultError, Prisma.GenericPageUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GenericPageUpdateArgs, DefaultError, GenericPage, true>('GenericPage', 'PUT', `${endpoint}/genericPage/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GenericPageUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.GenericPageUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GenericPage, Prisma.GenericPageGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GenericPageUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GenericPage, Prisma.GenericPageGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyGenericPage(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GenericPageUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GenericPageUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('GenericPage', 'PUT', `${endpoint}/genericPage/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GenericPageUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GenericPageUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GenericPageUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertGenericPage(options?: Omit<(UseMutationOptions<(GenericPage | undefined), DefaultError, Prisma.GenericPageUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GenericPageUpsertArgs, DefaultError, GenericPage, true>('GenericPage', 'POST', `${endpoint}/genericPage/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GenericPageUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.GenericPageUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GenericPage, Prisma.GenericPageGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GenericPageUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GenericPage, Prisma.GenericPageGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteGenericPage(options?: Omit<(UseMutationOptions<(GenericPage | undefined), DefaultError, Prisma.GenericPageDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GenericPageDeleteArgs, DefaultError, GenericPage, true>('GenericPage', 'DELETE', `${endpoint}/genericPage/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GenericPageDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.GenericPageDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, GenericPage, Prisma.GenericPageGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.GenericPageDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, GenericPage, Prisma.GenericPageGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyGenericPage(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.GenericPageDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.GenericPageDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('GenericPage', 'DELETE', `${endpoint}/genericPage/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.GenericPageDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.GenericPageDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.GenericPageDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateGenericPage<TArgs extends Prisma.GenericPageAggregateArgs, TQueryFnData = Prisma.GetGenericPageAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GenericPageAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateGenericPage<TArgs extends Prisma.GenericPageAggregateArgs, TQueryFnData = Prisma.GetGenericPageAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.GenericPageAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/aggregate`, args, options, fetch);
}

export function useGroupByGenericPage<TArgs extends Prisma.GenericPageGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GenericPageGroupByArgs['orderBy'] } : { orderBy?: Prisma.GenericPageGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GenericPageGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GenericPageGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GenericPageGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GenericPageGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GenericPageGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByGenericPage<TArgs extends Prisma.GenericPageGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.GenericPageGroupByArgs['orderBy'] } : { orderBy?: Prisma.GenericPageGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.GenericPageGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.GenericPageGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.GenericPageGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.GenericPageGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.GenericPageGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/groupBy`, args, options, fetch);
}

export function useCountGenericPage<TArgs extends Prisma.GenericPageCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GenericPageCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GenericPageCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/count`, args, options, fetch);
}

export function useSuspenseCountGenericPage<TArgs extends Prisma.GenericPageCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.GenericPageCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.GenericPageCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('GenericPage', `${endpoint}/genericPage/count`, args, options, fetch);
}

export function useCheckGenericPage<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; title?: string; description?: string; slug?: string; sectionId?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('GenericPage', `${endpoint}/genericPage/check`, args, options, fetch);
}
