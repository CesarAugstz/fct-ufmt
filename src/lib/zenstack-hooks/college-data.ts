/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, CollegeData } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateCollegeData(options?: Omit<(UseMutationOptions<(CollegeData | undefined), DefaultError, Prisma.CollegeDataCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CollegeDataCreateArgs, DefaultError, CollegeData, true>('CollegeData', 'POST', `${endpoint}/collegeData/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CollegeDataCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CollegeDataCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CollegeData, Prisma.CollegeDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CollegeDataCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CollegeData, Prisma.CollegeDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyCollegeData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CollegeDataCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CollegeDataCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('CollegeData', 'POST', `${endpoint}/collegeData/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CollegeDataCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CollegeDataCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CollegeDataCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyCollegeData<TArgs extends Prisma.CollegeDataFindManyArgs, TQueryFnData = Array<Prisma.CollegeDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CollegeDataFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/findMany`, args, options, fetch);
}

export function useInfiniteFindManyCollegeData<TArgs extends Prisma.CollegeDataFindManyArgs, TQueryFnData = Array<Prisma.CollegeDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CollegeDataFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/findMany`, args, options, fetch);
}

export function useSuspenseFindManyCollegeData<TArgs extends Prisma.CollegeDataFindManyArgs, TQueryFnData = Array<Prisma.CollegeDataGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CollegeDataFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyCollegeData<TArgs extends Prisma.CollegeDataFindManyArgs, TQueryFnData = Array<Prisma.CollegeDataGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CollegeDataFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/findMany`, args, options, fetch);
}

export function useFindUniqueCollegeData<TArgs extends Prisma.CollegeDataFindUniqueArgs, TQueryFnData = Prisma.CollegeDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CollegeDataFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueCollegeData<TArgs extends Prisma.CollegeDataFindUniqueArgs, TQueryFnData = Prisma.CollegeDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CollegeDataFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/findUnique`, args, options, fetch);
}

export function useFindFirstCollegeData<TArgs extends Prisma.CollegeDataFindFirstArgs, TQueryFnData = Prisma.CollegeDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CollegeDataFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstCollegeData<TArgs extends Prisma.CollegeDataFindFirstArgs, TQueryFnData = Prisma.CollegeDataGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CollegeDataFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/findFirst`, args, options, fetch);
}

export function useUpdateCollegeData(options?: Omit<(UseMutationOptions<(CollegeData | undefined), DefaultError, Prisma.CollegeDataUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CollegeDataUpdateArgs, DefaultError, CollegeData, true>('CollegeData', 'PUT', `${endpoint}/collegeData/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CollegeDataUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.CollegeDataUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CollegeData, Prisma.CollegeDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CollegeDataUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CollegeData, Prisma.CollegeDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyCollegeData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CollegeDataUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CollegeDataUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('CollegeData', 'PUT', `${endpoint}/collegeData/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CollegeDataUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CollegeDataUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CollegeDataUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertCollegeData(options?: Omit<(UseMutationOptions<(CollegeData | undefined), DefaultError, Prisma.CollegeDataUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CollegeDataUpsertArgs, DefaultError, CollegeData, true>('CollegeData', 'POST', `${endpoint}/collegeData/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CollegeDataUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.CollegeDataUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CollegeData, Prisma.CollegeDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CollegeDataUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CollegeData, Prisma.CollegeDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteCollegeData(options?: Omit<(UseMutationOptions<(CollegeData | undefined), DefaultError, Prisma.CollegeDataDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CollegeDataDeleteArgs, DefaultError, CollegeData, true>('CollegeData', 'DELETE', `${endpoint}/collegeData/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CollegeDataDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.CollegeDataDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, CollegeData, Prisma.CollegeDataGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.CollegeDataDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, CollegeData, Prisma.CollegeDataGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyCollegeData(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.CollegeDataDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.CollegeDataDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('CollegeData', 'DELETE', `${endpoint}/collegeData/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.CollegeDataDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.CollegeDataDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.CollegeDataDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateCollegeData<TArgs extends Prisma.CollegeDataAggregateArgs, TQueryFnData = Prisma.GetCollegeDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CollegeDataAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateCollegeData<TArgs extends Prisma.CollegeDataAggregateArgs, TQueryFnData = Prisma.GetCollegeDataAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.CollegeDataAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/aggregate`, args, options, fetch);
}

export function useGroupByCollegeData<TArgs extends Prisma.CollegeDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CollegeDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CollegeDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CollegeDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CollegeDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CollegeDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CollegeDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CollegeDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByCollegeData<TArgs extends Prisma.CollegeDataGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.CollegeDataGroupByArgs['orderBy'] } : { orderBy?: Prisma.CollegeDataGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.CollegeDataGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.CollegeDataGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.CollegeDataGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.CollegeDataGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.CollegeDataGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/groupBy`, args, options, fetch);
}

export function useCountCollegeData<TArgs extends Prisma.CollegeDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CollegeDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CollegeDataCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/count`, args, options, fetch);
}

export function useSuspenseCountCollegeData<TArgs extends Prisma.CollegeDataCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.CollegeDataCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.CollegeDataCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('CollegeData', `${endpoint}/collegeData/count`, args, options, fetch);
}

export function useCheckCollegeData<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; acronym?: string; description?: string; logoId?: string; bannerTitle?: string; bannerSubtitle?: string; bannerButtonLabel?: string; bannerImageId?: string; secondBannerTitle?: string; secondBannerSubtitle?: string; secondBannerButtonLabel?: string; bannerNumbersTitle?: string; bannerNumbersSubtitle?: string; locationItems?: string; contactItems?: string; instagram?: string; youtube?: string }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('CollegeData', `${endpoint}/collegeData/check`, args, options, fetch);
}
