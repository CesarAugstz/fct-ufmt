/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, Management } from '@zenstackhq/runtime/models'
import type {
  UseMutationOptions,
  UseQueryOptions,
  UseInfiniteQueryOptions,
  InfiniteData,
} from '@tanstack/react-query'
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react'
import {
  useModelQuery,
  useInfiniteModelQuery,
  useModelMutation,
} from '@zenstackhq/tanstack-query/runtime-v5/react'
import type {
  PickEnumerable,
  CheckSelect,
  QueryError,
  ExtraQueryOptions,
  ExtraMutationOptions,
} from '@zenstackhq/tanstack-query/runtime-v5'
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta'
type DefaultError = QueryError
import {
  useSuspenseModelQuery,
  useSuspenseInfiniteModelQuery,
} from '@zenstackhq/tanstack-query/runtime-v5/react'
import type {
  UseSuspenseQueryOptions,
  UseSuspenseInfiniteQueryOptions,
} from '@tanstack/react-query'

export function useCreateManagement(
  options?: Omit<
    UseMutationOptions<
      Management | undefined,
      DefaultError,
      Prisma.ManagementCreateArgs
    > &
      ExtraMutationOptions,
    'mutationFn'
  >,
) {
  const { endpoint, fetch } = getHooksContext()
  const _mutation = useModelMutation<
    Prisma.ManagementCreateArgs,
    DefaultError,
    Management,
    true
  >(
    'Management',
    'POST',
    `${endpoint}/management/create`,
    metadata,
    options,
    fetch,
    true,
  )
  const mutation = {
    ..._mutation,
    mutateAsync: async <T extends Prisma.ManagementCreateArgs>(
      args: Prisma.SelectSubset<T, Prisma.ManagementCreateArgs>,
      options?: Omit<
        UseMutationOptions<
          | CheckSelect<T, Management, Prisma.ManagementGetPayload<T>>
          | undefined,
          DefaultError,
          Prisma.SelectSubset<T, Prisma.ManagementCreateArgs>
        > &
          ExtraMutationOptions,
        'mutationFn'
      >,
    ) => {
      return (await _mutation.mutateAsync(args, options as any)) as
        | CheckSelect<T, Management, Prisma.ManagementGetPayload<T>>
        | undefined
    },
  }
  return mutation
}

export function useCreateManyManagement(
  options?: Omit<
    UseMutationOptions<
      Prisma.BatchPayload,
      DefaultError,
      Prisma.ManagementCreateManyArgs
    > &
      ExtraMutationOptions,
    'mutationFn'
  >,
) {
  const { endpoint, fetch } = getHooksContext()
  const _mutation = useModelMutation<
    Prisma.ManagementCreateManyArgs,
    DefaultError,
    Prisma.BatchPayload,
    false
  >(
    'Management',
    'POST',
    `${endpoint}/management/createMany`,
    metadata,
    options,
    fetch,
    false,
  )
  const mutation = {
    ..._mutation,
    mutateAsync: async <T extends Prisma.ManagementCreateManyArgs>(
      args: Prisma.SelectSubset<T, Prisma.ManagementCreateManyArgs>,
      options?: Omit<
        UseMutationOptions<
          Prisma.BatchPayload,
          DefaultError,
          Prisma.SelectSubset<T, Prisma.ManagementCreateManyArgs>
        > &
          ExtraMutationOptions,
        'mutationFn'
      >,
    ) => {
      return (await _mutation.mutateAsync(
        args,
        options as any,
      )) as Prisma.BatchPayload
    },
  }
  return mutation
}

export function useFindManyManagement<
  TArgs extends Prisma.ManagementFindManyArgs,
  TQueryFnData = Array<
    Prisma.ManagementGetPayload<TArgs> & { $optimistic?: boolean }
  >,
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args?: Prisma.SelectSubset<TArgs, Prisma.ManagementFindManyArgs>,
  options?: Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/findMany`,
    args,
    options,
    fetch,
  )
}

export function useInfiniteFindManyManagement<
  TArgs extends Prisma.ManagementFindManyArgs,
  TQueryFnData = Array<Prisma.ManagementGetPayload<TArgs>>,
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args?: Prisma.SelectSubset<TArgs, Prisma.ManagementFindManyArgs>,
  options?: Omit<
    UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>,
    'queryKey' | 'initialPageParam'
  >,
) {
  options = options ?? { getNextPageParam: () => null }
  const { endpoint, fetch } = getHooksContext()
  return useInfiniteModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/findMany`,
    args,
    options,
    fetch,
  )
}

export function useSuspenseFindManyManagement<
  TArgs extends Prisma.ManagementFindManyArgs,
  TQueryFnData = Array<
    Prisma.ManagementGetPayload<TArgs> & { $optimistic?: boolean }
  >,
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args?: Prisma.SelectSubset<TArgs, Prisma.ManagementFindManyArgs>,
  options?: Omit<
    UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
    'queryKey'
  > &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useSuspenseModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/findMany`,
    args,
    options,
    fetch,
  )
}

export function useSuspenseInfiniteFindManyManagement<
  TArgs extends Prisma.ManagementFindManyArgs,
  TQueryFnData = Array<Prisma.ManagementGetPayload<TArgs>>,
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args?: Prisma.SelectSubset<TArgs, Prisma.ManagementFindManyArgs>,
  options?: Omit<
    UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>,
    'queryKey' | 'initialPageParam'
  >,
) {
  options = options ?? { getNextPageParam: () => null }
  const { endpoint, fetch } = getHooksContext()
  return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/findMany`,
    args,
    options,
    fetch,
  )
}

export function useFindUniqueManagement<
  TArgs extends Prisma.ManagementFindUniqueArgs,
  TQueryFnData = Prisma.ManagementGetPayload<TArgs> & { $optimistic?: boolean },
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args: Prisma.SelectSubset<TArgs, Prisma.ManagementFindUniqueArgs>,
  options?: Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/findUnique`,
    args,
    options,
    fetch,
  )
}

export function useSuspenseFindUniqueManagement<
  TArgs extends Prisma.ManagementFindUniqueArgs,
  TQueryFnData = Prisma.ManagementGetPayload<TArgs> & { $optimistic?: boolean },
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args: Prisma.SelectSubset<TArgs, Prisma.ManagementFindUniqueArgs>,
  options?: Omit<
    UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
    'queryKey'
  > &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useSuspenseModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/findUnique`,
    args,
    options,
    fetch,
  )
}

export function useFindFirstManagement<
  TArgs extends Prisma.ManagementFindFirstArgs,
  TQueryFnData = Prisma.ManagementGetPayload<TArgs> & { $optimistic?: boolean },
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args?: Prisma.SelectSubset<TArgs, Prisma.ManagementFindFirstArgs>,
  options?: Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/findFirst`,
    args,
    options,
    fetch,
  )
}

export function useSuspenseFindFirstManagement<
  TArgs extends Prisma.ManagementFindFirstArgs,
  TQueryFnData = Prisma.ManagementGetPayload<TArgs> & { $optimistic?: boolean },
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args?: Prisma.SelectSubset<TArgs, Prisma.ManagementFindFirstArgs>,
  options?: Omit<
    UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
    'queryKey'
  > &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useSuspenseModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/findFirst`,
    args,
    options,
    fetch,
  )
}

export function useUpdateManagement(
  options?: Omit<
    UseMutationOptions<
      Management | undefined,
      DefaultError,
      Prisma.ManagementUpdateArgs
    > &
      ExtraMutationOptions,
    'mutationFn'
  >,
) {
  const { endpoint, fetch } = getHooksContext()
  const _mutation = useModelMutation<
    Prisma.ManagementUpdateArgs,
    DefaultError,
    Management,
    true
  >(
    'Management',
    'PUT',
    `${endpoint}/management/update`,
    metadata,
    options,
    fetch,
    true,
  )
  const mutation = {
    ..._mutation,
    mutateAsync: async <T extends Prisma.ManagementUpdateArgs>(
      args: Prisma.SelectSubset<T, Prisma.ManagementUpdateArgs>,
      options?: Omit<
        UseMutationOptions<
          | CheckSelect<T, Management, Prisma.ManagementGetPayload<T>>
          | undefined,
          DefaultError,
          Prisma.SelectSubset<T, Prisma.ManagementUpdateArgs>
        > &
          ExtraMutationOptions,
        'mutationFn'
      >,
    ) => {
      return (await _mutation.mutateAsync(args, options as any)) as
        | CheckSelect<T, Management, Prisma.ManagementGetPayload<T>>
        | undefined
    },
  }
  return mutation
}

export function useUpdateManyManagement(
  options?: Omit<
    UseMutationOptions<
      Prisma.BatchPayload,
      DefaultError,
      Prisma.ManagementUpdateManyArgs
    > &
      ExtraMutationOptions,
    'mutationFn'
  >,
) {
  const { endpoint, fetch } = getHooksContext()
  const _mutation = useModelMutation<
    Prisma.ManagementUpdateManyArgs,
    DefaultError,
    Prisma.BatchPayload,
    false
  >(
    'Management',
    'PUT',
    `${endpoint}/management/updateMany`,
    metadata,
    options,
    fetch,
    false,
  )
  const mutation = {
    ..._mutation,
    mutateAsync: async <T extends Prisma.ManagementUpdateManyArgs>(
      args: Prisma.SelectSubset<T, Prisma.ManagementUpdateManyArgs>,
      options?: Omit<
        UseMutationOptions<
          Prisma.BatchPayload,
          DefaultError,
          Prisma.SelectSubset<T, Prisma.ManagementUpdateManyArgs>
        > &
          ExtraMutationOptions,
        'mutationFn'
      >,
    ) => {
      return (await _mutation.mutateAsync(
        args,
        options as any,
      )) as Prisma.BatchPayload
    },
  }
  return mutation
}

export function useUpsertManagement(
  options?: Omit<
    UseMutationOptions<
      Management | undefined,
      DefaultError,
      Prisma.ManagementUpsertArgs
    > &
      ExtraMutationOptions,
    'mutationFn'
  >,
) {
  const { endpoint, fetch } = getHooksContext()
  const _mutation = useModelMutation<
    Prisma.ManagementUpsertArgs,
    DefaultError,
    Management,
    true
  >(
    'Management',
    'POST',
    `${endpoint}/management/upsert`,
    metadata,
    options,
    fetch,
    true,
  )
  const mutation = {
    ..._mutation,
    mutateAsync: async <T extends Prisma.ManagementUpsertArgs>(
      args: Prisma.SelectSubset<T, Prisma.ManagementUpsertArgs>,
      options?: Omit<
        UseMutationOptions<
          | CheckSelect<T, Management, Prisma.ManagementGetPayload<T>>
          | undefined,
          DefaultError,
          Prisma.SelectSubset<T, Prisma.ManagementUpsertArgs>
        > &
          ExtraMutationOptions,
        'mutationFn'
      >,
    ) => {
      return (await _mutation.mutateAsync(args, options as any)) as
        | CheckSelect<T, Management, Prisma.ManagementGetPayload<T>>
        | undefined
    },
  }
  return mutation
}

export function useDeleteManagement(
  options?: Omit<
    UseMutationOptions<
      Management | undefined,
      DefaultError,
      Prisma.ManagementDeleteArgs
    > &
      ExtraMutationOptions,
    'mutationFn'
  >,
) {
  const { endpoint, fetch } = getHooksContext()
  const _mutation = useModelMutation<
    Prisma.ManagementDeleteArgs,
    DefaultError,
    Management,
    true
  >(
    'Management',
    'DELETE',
    `${endpoint}/management/delete`,
    metadata,
    options,
    fetch,
    true,
  )
  const mutation = {
    ..._mutation,
    mutateAsync: async <T extends Prisma.ManagementDeleteArgs>(
      args: Prisma.SelectSubset<T, Prisma.ManagementDeleteArgs>,
      options?: Omit<
        UseMutationOptions<
          | CheckSelect<T, Management, Prisma.ManagementGetPayload<T>>
          | undefined,
          DefaultError,
          Prisma.SelectSubset<T, Prisma.ManagementDeleteArgs>
        > &
          ExtraMutationOptions,
        'mutationFn'
      >,
    ) => {
      return (await _mutation.mutateAsync(args, options as any)) as
        | CheckSelect<T, Management, Prisma.ManagementGetPayload<T>>
        | undefined
    },
  }
  return mutation
}

export function useDeleteManyManagement(
  options?: Omit<
    UseMutationOptions<
      Prisma.BatchPayload,
      DefaultError,
      Prisma.ManagementDeleteManyArgs
    > &
      ExtraMutationOptions,
    'mutationFn'
  >,
) {
  const { endpoint, fetch } = getHooksContext()
  const _mutation = useModelMutation<
    Prisma.ManagementDeleteManyArgs,
    DefaultError,
    Prisma.BatchPayload,
    false
  >(
    'Management',
    'DELETE',
    `${endpoint}/management/deleteMany`,
    metadata,
    options,
    fetch,
    false,
  )
  const mutation = {
    ..._mutation,
    mutateAsync: async <T extends Prisma.ManagementDeleteManyArgs>(
      args: Prisma.SelectSubset<T, Prisma.ManagementDeleteManyArgs>,
      options?: Omit<
        UseMutationOptions<
          Prisma.BatchPayload,
          DefaultError,
          Prisma.SelectSubset<T, Prisma.ManagementDeleteManyArgs>
        > &
          ExtraMutationOptions,
        'mutationFn'
      >,
    ) => {
      return (await _mutation.mutateAsync(
        args,
        options as any,
      )) as Prisma.BatchPayload
    },
  }
  return mutation
}

export function useAggregateManagement<
  TArgs extends Prisma.ManagementAggregateArgs,
  TQueryFnData = Prisma.GetManagementAggregateType<TArgs>,
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args: Prisma.SelectSubset<TArgs, Prisma.ManagementAggregateArgs>,
  options?: Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/aggregate`,
    args,
    options,
    fetch,
  )
}

export function useSuspenseAggregateManagement<
  TArgs extends Prisma.ManagementAggregateArgs,
  TQueryFnData = Prisma.GetManagementAggregateType<TArgs>,
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args: Prisma.SelectSubset<TArgs, Prisma.ManagementAggregateArgs>,
  options?: Omit<
    UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
    'queryKey'
  > &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useSuspenseModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/aggregate`,
    args,
    options,
    fetch,
  )
}

export function useGroupByManagement<
  TArgs extends Prisma.ManagementGroupByArgs,
  HasSelectOrTake extends Prisma.Or<
    Prisma.Extends<'skip', Prisma.Keys<TArgs>>,
    Prisma.Extends<'take', Prisma.Keys<TArgs>>
  >,
  OrderByArg extends Prisma.True extends HasSelectOrTake
    ? { orderBy: Prisma.ManagementGroupByArgs['orderBy'] }
    : { orderBy?: Prisma.ManagementGroupByArgs['orderBy'] },
  OrderFields extends Prisma.ExcludeUnderscoreKeys<
    Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>
  >,
  ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>,
  ByValid extends Prisma.Has<ByFields, OrderFields>,
  HavingFields extends Prisma.GetHavingFields<TArgs['having']>,
  HavingValid extends Prisma.Has<ByFields, HavingFields>,
  ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False,
  InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  'Field ',
                  P,
                  ` in "having" needs to be provided in "by"`,
                ]
        }[HavingFields]
      : 'take' extends Prisma.Keys<TArgs>
        ? 'orderBy' extends Prisma.Keys<TArgs>
          ? ByValid extends Prisma.True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Prisma.Keys<TArgs>
          ? 'orderBy' extends Prisma.Keys<TArgs>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "skip", you also need to provide "orderBy"'
          : ByValid extends Prisma.True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
              }[OrderFields],
  TQueryFnData = {} extends InputErrors
    ? Array<
        PickEnumerable<Prisma.ManagementGroupByOutputType, TArgs['by']> & {
          [P in keyof TArgs &
            keyof Prisma.ManagementGroupByOutputType]: P extends '_count'
            ? TArgs[P] extends boolean
              ? number
              : Prisma.GetScalarType<
                  TArgs[P],
                  Prisma.ManagementGroupByOutputType[P]
                >
            : Prisma.GetScalarType<
                TArgs[P],
                Prisma.ManagementGroupByOutputType[P]
              >
        }
      >
    : InputErrors,
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args: Prisma.SelectSubset<
    TArgs,
    Prisma.SubsetIntersection<TArgs, Prisma.ManagementGroupByArgs, OrderByArg> &
      InputErrors
  >,
  options?: Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/groupBy`,
    args,
    options,
    fetch,
  )
}

export function useSuspenseGroupByManagement<
  TArgs extends Prisma.ManagementGroupByArgs,
  HasSelectOrTake extends Prisma.Or<
    Prisma.Extends<'skip', Prisma.Keys<TArgs>>,
    Prisma.Extends<'take', Prisma.Keys<TArgs>>
  >,
  OrderByArg extends Prisma.True extends HasSelectOrTake
    ? { orderBy: Prisma.ManagementGroupByArgs['orderBy'] }
    : { orderBy?: Prisma.ManagementGroupByArgs['orderBy'] },
  OrderFields extends Prisma.ExcludeUnderscoreKeys<
    Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>
  >,
  ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>,
  ByValid extends Prisma.Has<ByFields, OrderFields>,
  HavingFields extends Prisma.GetHavingFields<TArgs['having']>,
  HavingValid extends Prisma.Has<ByFields, HavingFields>,
  ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False,
  InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
              ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
              : [
                  Error,
                  'Field ',
                  P,
                  ` in "having" needs to be provided in "by"`,
                ]
        }[HavingFields]
      : 'take' extends Prisma.Keys<TArgs>
        ? 'orderBy' extends Prisma.Keys<TArgs>
          ? ByValid extends Prisma.True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
              }[OrderFields]
          : 'Error: If you provide "take", you also need to provide "orderBy"'
        : 'skip' extends Prisma.Keys<TArgs>
          ? 'orderBy' extends Prisma.Keys<TArgs>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
                }[OrderFields]
            : 'Error: If you provide "skip", you also need to provide "orderBy"'
          : ByValid extends Prisma.True
            ? {}
            : {
                [P in OrderFields]: P extends ByFields
                  ? never
                  : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
              }[OrderFields],
  TQueryFnData = {} extends InputErrors
    ? Array<
        PickEnumerable<Prisma.ManagementGroupByOutputType, TArgs['by']> & {
          [P in keyof TArgs &
            keyof Prisma.ManagementGroupByOutputType]: P extends '_count'
            ? TArgs[P] extends boolean
              ? number
              : Prisma.GetScalarType<
                  TArgs[P],
                  Prisma.ManagementGroupByOutputType[P]
                >
            : Prisma.GetScalarType<
                TArgs[P],
                Prisma.ManagementGroupByOutputType[P]
              >
        }
      >
    : InputErrors,
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args: Prisma.SelectSubset<
    TArgs,
    Prisma.SubsetIntersection<TArgs, Prisma.ManagementGroupByArgs, OrderByArg> &
      InputErrors
  >,
  options?: Omit<
    UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
    'queryKey'
  > &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useSuspenseModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/groupBy`,
    args,
    options,
    fetch,
  )
}

export function useCountManagement<
  TArgs extends Prisma.ManagementCountArgs,
  TQueryFnData = TArgs extends { select: any }
    ? TArgs['select'] extends true
      ? number
      : Prisma.GetScalarType<
          TArgs['select'],
          Prisma.ManagementCountAggregateOutputType
        >
    : number,
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args?: Prisma.SelectSubset<TArgs, Prisma.ManagementCountArgs>,
  options?: Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/count`,
    args,
    options,
    fetch,
  )
}

export function useSuspenseCountManagement<
  TArgs extends Prisma.ManagementCountArgs,
  TQueryFnData = TArgs extends { select: any }
    ? TArgs['select'] extends true
      ? number
      : Prisma.GetScalarType<
          TArgs['select'],
          Prisma.ManagementCountAggregateOutputType
        >
    : number,
  TData = TQueryFnData,
  TError = DefaultError,
>(
  args?: Prisma.SelectSubset<TArgs, Prisma.ManagementCountArgs>,
  options?: Omit<
    UseSuspenseQueryOptions<TQueryFnData, TError, TData>,
    'queryKey'
  > &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useSuspenseModelQuery<TQueryFnData, TData, TError>(
    'Management',
    `${endpoint}/management/count`,
    args,
    options,
    fetch,
  )
}

export function useCheckManagement<TError = DefaultError>(
  args: { operation: PolicyCrudKind; where?: { id?: string } },
  options?: Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> &
    ExtraQueryOptions,
) {
  const { endpoint, fetch } = getHooksContext()
  return useModelQuery<boolean, boolean, TError>(
    'Management',
    `${endpoint}/management/check`,
    args,
    options,
    fetch,
  )
}
