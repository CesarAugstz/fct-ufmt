/******************************************************************************
 * This file was generated by ZenStack CLI.
 ******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { Prisma, NewsCategory } from "@zenstackhq/runtime/models";
import type { UseMutationOptions, UseQueryOptions, UseInfiniteQueryOptions, InfiniteData } from '@tanstack/react-query';
import { getHooksContext } from '@zenstackhq/tanstack-query/runtime-v5/react';
import { useModelQuery, useInfiniteModelQuery, useModelMutation } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { PickEnumerable, CheckSelect, QueryError, ExtraQueryOptions, ExtraMutationOptions } from '@zenstackhq/tanstack-query/runtime-v5';
import type { PolicyCrudKind } from '@zenstackhq/runtime'
import metadata from './__model_meta';
type DefaultError = QueryError;
import { useSuspenseModelQuery, useSuspenseInfiniteModelQuery } from '@zenstackhq/tanstack-query/runtime-v5/react';
import type { UseSuspenseQueryOptions, UseSuspenseInfiniteQueryOptions } from '@tanstack/react-query';

export function useCreateNewsCategory(options?: Omit<(UseMutationOptions<(NewsCategory | undefined), DefaultError, Prisma.NewsCategoryCreateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NewsCategoryCreateArgs, DefaultError, NewsCategory, true>('NewsCategory', 'POST', `${endpoint}/newsCategory/create`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NewsCategoryCreateArgs>(
            args: Prisma.SelectSubset<T, Prisma.NewsCategoryCreateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, NewsCategory, Prisma.NewsCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.NewsCategoryCreateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, NewsCategory, Prisma.NewsCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useCreateManyNewsCategory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.NewsCategoryCreateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NewsCategoryCreateManyArgs, DefaultError, Prisma.BatchPayload, false>('NewsCategory', 'POST', `${endpoint}/newsCategory/createMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NewsCategoryCreateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.NewsCategoryCreateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.NewsCategoryCreateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useFindManyNewsCategory<TArgs extends Prisma.NewsCategoryFindManyArgs, TQueryFnData = Array<Prisma.NewsCategoryGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryFindManyArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/findMany`, args, options, fetch);
}

export function useInfiniteFindManyNewsCategory<TArgs extends Prisma.NewsCategoryFindManyArgs, TQueryFnData = Array<Prisma.NewsCategoryGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryFindManyArgs>, options?: Omit<UseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useInfiniteModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/findMany`, args, options, fetch);
}

export function useSuspenseFindManyNewsCategory<TArgs extends Prisma.NewsCategoryFindManyArgs, TQueryFnData = Array<Prisma.NewsCategoryGetPayload<TArgs> & { $optimistic?: boolean }>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryFindManyArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/findMany`, args, options, fetch);
}

export function useSuspenseInfiniteFindManyNewsCategory<TArgs extends Prisma.NewsCategoryFindManyArgs, TQueryFnData = Array<Prisma.NewsCategoryGetPayload<TArgs>>, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryFindManyArgs>, options?: Omit<UseSuspenseInfiniteQueryOptions<TQueryFnData, TError, InfiniteData<TData>>, 'queryKey' | 'initialPageParam'>) {
    options = options ?? { getNextPageParam: () => null };
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseInfiniteModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/findMany`, args, options, fetch);
}

export function useFindUniqueNewsCategory<TArgs extends Prisma.NewsCategoryFindUniqueArgs, TQueryFnData = Prisma.NewsCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryFindUniqueArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/findUnique`, args, options, fetch);
}

export function useSuspenseFindUniqueNewsCategory<TArgs extends Prisma.NewsCategoryFindUniqueArgs, TQueryFnData = Prisma.NewsCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryFindUniqueArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/findUnique`, args, options, fetch);
}

export function useFindFirstNewsCategory<TArgs extends Prisma.NewsCategoryFindFirstArgs, TQueryFnData = Prisma.NewsCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryFindFirstArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/findFirst`, args, options, fetch);
}

export function useSuspenseFindFirstNewsCategory<TArgs extends Prisma.NewsCategoryFindFirstArgs, TQueryFnData = Prisma.NewsCategoryGetPayload<TArgs> & { $optimistic?: boolean }, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryFindFirstArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/findFirst`, args, options, fetch);
}

export function useUpdateNewsCategory(options?: Omit<(UseMutationOptions<(NewsCategory | undefined), DefaultError, Prisma.NewsCategoryUpdateArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NewsCategoryUpdateArgs, DefaultError, NewsCategory, true>('NewsCategory', 'PUT', `${endpoint}/newsCategory/update`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NewsCategoryUpdateArgs>(
            args: Prisma.SelectSubset<T, Prisma.NewsCategoryUpdateArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, NewsCategory, Prisma.NewsCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.NewsCategoryUpdateArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, NewsCategory, Prisma.NewsCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useUpdateManyNewsCategory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.NewsCategoryUpdateManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NewsCategoryUpdateManyArgs, DefaultError, Prisma.BatchPayload, false>('NewsCategory', 'PUT', `${endpoint}/newsCategory/updateMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NewsCategoryUpdateManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.NewsCategoryUpdateManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.NewsCategoryUpdateManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useUpsertNewsCategory(options?: Omit<(UseMutationOptions<(NewsCategory | undefined), DefaultError, Prisma.NewsCategoryUpsertArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NewsCategoryUpsertArgs, DefaultError, NewsCategory, true>('NewsCategory', 'POST', `${endpoint}/newsCategory/upsert`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NewsCategoryUpsertArgs>(
            args: Prisma.SelectSubset<T, Prisma.NewsCategoryUpsertArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, NewsCategory, Prisma.NewsCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.NewsCategoryUpsertArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, NewsCategory, Prisma.NewsCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteNewsCategory(options?: Omit<(UseMutationOptions<(NewsCategory | undefined), DefaultError, Prisma.NewsCategoryDeleteArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NewsCategoryDeleteArgs, DefaultError, NewsCategory, true>('NewsCategory', 'DELETE', `${endpoint}/newsCategory/delete`, metadata, options, fetch, true)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NewsCategoryDeleteArgs>(
            args: Prisma.SelectSubset<T, Prisma.NewsCategoryDeleteArgs>,
            options?: Omit<(UseMutationOptions<(CheckSelect<T, NewsCategory, Prisma.NewsCategoryGetPayload<T>> | undefined), DefaultError, Prisma.SelectSubset<T, Prisma.NewsCategoryDeleteArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as (CheckSelect<T, NewsCategory, Prisma.NewsCategoryGetPayload<T>> | undefined);
        },
    };
    return mutation;
}

export function useDeleteManyNewsCategory(options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.NewsCategoryDeleteManyArgs> & ExtraMutationOptions), 'mutationFn'>) {
    const { endpoint, fetch } = getHooksContext();
    const _mutation =
        useModelMutation<Prisma.NewsCategoryDeleteManyArgs, DefaultError, Prisma.BatchPayload, false>('NewsCategory', 'DELETE', `${endpoint}/newsCategory/deleteMany`, metadata, options, fetch, false)
        ;
    const mutation = {
        ..._mutation,
        mutateAsync: async <T extends Prisma.NewsCategoryDeleteManyArgs>(
            args: Prisma.SelectSubset<T, Prisma.NewsCategoryDeleteManyArgs>,
            options?: Omit<(UseMutationOptions<Prisma.BatchPayload, DefaultError, Prisma.SelectSubset<T, Prisma.NewsCategoryDeleteManyArgs>> & ExtraMutationOptions), 'mutationFn'>
        ) => {
            return (await _mutation.mutateAsync(
                args,
                options as any
            )) as Prisma.BatchPayload;
        },
    };
    return mutation;
}

export function useAggregateNewsCategory<TArgs extends Prisma.NewsCategoryAggregateArgs, TQueryFnData = Prisma.GetNewsCategoryAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryAggregateArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/aggregate`, args, options, fetch);
}

export function useSuspenseAggregateNewsCategory<TArgs extends Prisma.NewsCategoryAggregateArgs, TQueryFnData = Prisma.GetNewsCategoryAggregateType<TArgs>, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryAggregateArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/aggregate`, args, options, fetch);
}

export function useGroupByNewsCategory<TArgs extends Prisma.NewsCategoryGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.NewsCategoryGroupByArgs['orderBy'] } : { orderBy?: Prisma.NewsCategoryGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.NewsCategoryGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.NewsCategoryGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.NewsCategoryGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.NewsCategoryGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.NewsCategoryGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/groupBy`, args, options, fetch);
}

export function useSuspenseGroupByNewsCategory<TArgs extends Prisma.NewsCategoryGroupByArgs, HasSelectOrTake extends Prisma.Or<Prisma.Extends<'skip', Prisma.Keys<TArgs>>, Prisma.Extends<'take', Prisma.Keys<TArgs>>>, OrderByArg extends Prisma.True extends HasSelectOrTake ? { orderBy: Prisma.NewsCategoryGroupByArgs['orderBy'] } : { orderBy?: Prisma.NewsCategoryGroupByArgs['orderBy'] }, OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<TArgs['orderBy']>>>, ByFields extends Prisma.MaybeTupleToUnion<TArgs['by']>, ByValid extends Prisma.Has<ByFields, OrderFields>, HavingFields extends Prisma.GetHavingFields<TArgs['having']>, HavingValid extends Prisma.Has<ByFields, HavingFields>, ByEmpty extends TArgs['by'] extends never[] ? Prisma.True : Prisma.False, InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
        ? never
        : P extends string
        ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
        : [
            Error,
            'Field ',
            P,
            ` in "having" needs to be provided in "by"`,
        ]
    }[HavingFields]
    : 'take' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<TArgs>
    ? 'orderBy' extends Prisma.Keys<TArgs>
    ? ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields]
    : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
        ? never
        : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
    }[OrderFields], TQueryFnData = {} extends InputErrors ?
    Array<PickEnumerable<Prisma.NewsCategoryGroupByOutputType, TArgs['by']> &
        {
            [P in ((keyof TArgs) & (keyof Prisma.NewsCategoryGroupByOutputType))]: P extends '_count'
            ? TArgs[P] extends boolean
            ? number
            : Prisma.GetScalarType<TArgs[P], Prisma.NewsCategoryGroupByOutputType[P]>
            : Prisma.GetScalarType<TArgs[P], Prisma.NewsCategoryGroupByOutputType[P]>
        }
    > : InputErrors, TData = TQueryFnData, TError = DefaultError>(args: Prisma.SelectSubset<TArgs, Prisma.SubsetIntersection<TArgs, Prisma.NewsCategoryGroupByArgs, OrderByArg> & InputErrors>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/groupBy`, args, options, fetch);
}

export function useCountNewsCategory<TArgs extends Prisma.NewsCategoryCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.NewsCategoryCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryCountArgs>, options?: (Omit<UseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/count`, args, options, fetch);
}

export function useSuspenseCountNewsCategory<TArgs extends Prisma.NewsCategoryCountArgs, TQueryFnData = TArgs extends { select: any; } ? TArgs['select'] extends true ? number : Prisma.GetScalarType<TArgs['select'], Prisma.NewsCategoryCountAggregateOutputType> : number, TData = TQueryFnData, TError = DefaultError>(args?: Prisma.SelectSubset<TArgs, Prisma.NewsCategoryCountArgs>, options?: (Omit<UseSuspenseQueryOptions<TQueryFnData, TError, TData>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useSuspenseModelQuery<TQueryFnData, TData, TError>('NewsCategory', `${endpoint}/newsCategory/count`, args, options, fetch);
}

export function useCheckNewsCategory<TError = DefaultError>(args: { operation: PolicyCrudKind; where?: { id?: string; name?: string; description?: string; slug?: string; order?: number }; }, options?: (Omit<UseQueryOptions<boolean, TError, boolean>, 'queryKey'> & ExtraQueryOptions)) {
    const { endpoint, fetch } = getHooksContext();
    return useModelQuery<boolean, boolean, TError>('NewsCategory', `${endpoint}/newsCategory/check`, args, options, fetch);
}
